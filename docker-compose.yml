version: '3.8'

x-php-config:
  &php-config
  env_file:
    - .env
  build:
    context: ../backend
    args:
      user: www
      uid: 80
  restart: unless-stopped

services:

  traefik:
    image: "traefik:v2.4"
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      - "traefik.http.routers.nginx.middlewares=redirect-to-https"
      - "traefik.http.routers.nginx.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.nginx.entrypoints=web"

      - "traefik.http.routers.nginx-s.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.nginx-s.entrypoints=websecure"
      - "traefik.http.routers.nginx-s.tls=true"
      - "traefik.http.routers.nginx-s.tls.certresolver=myresolver"

  backend:
    <<: *php-config
    depends_on:
      - pgsql

  frontend:
    build:
      context: ../frontend
      args:
        - PUSHER_APP_KEY
        - BROADCAST_AUTH_URL
    env_file:
      - .env

    restart: unless-stopped

  scheduler:
    <<: *php-config
    command: bash -c "while true; do php artisan donations:load-from-donate-pay; sleep 16; done"
    depends_on:
      - backend

  pgsql:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]